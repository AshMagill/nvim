local M = {}
function M.execute()
    -- Get the project directory
    local projectDir = vim.fn.finddir('Logs', '.;')
    -- Construct the Logs folder path in the project directory
    local logsFolder = projectDir .. "/"
    -- Get the list of files in the Logs folder
    local files = vim.fn.readdir(logsFolder)
    -- Sort the files by modification time (newest first)
    table.sort(files, function(a, b)
        return vim.fn.getftime(logsFolder .. a) > vim.fn.getftime(logsFolder .. b)
    end)
    -- Concatenate the contents of the three most recent files
    local prompt = "You are to act as an assistant for a de"
    --for i = 1, 3 do
    --local file = logsFolder .. files[i]
        --local contents = vim.fn.readfile(file)
        --concatenatedText = concatenatedText .. table.concat(contents, "\n") .. "\n"
    --end
    ---- Concatenate the contents of the links.csv file
    --local linksFolder = projectDir .. "/../Links/"
    --local linksFile = linksFolder .. "links.csv"
    --local linksContents = vim.fn.readfile(linksFile)
    --concatenatedText = concatenatedText .. "\n\nThis is a csv of my links:\n\n" .. table.concat(linksContents, "\n") .. "\n"
    ---- Concatenate the contents of the todo.csv file
    --local todoFolder = projectDir .. "/../Todo/"
    --local todoFile = todoFolder .. "todo.csv"
    --local todoContents = vim.fn.readfile(todoFile)
    --concatenatedText = concatenatedText .. "\n\nThis is a csv of my todos:\n\n" .. table.concat(todoContents, "\n") .. "\n"
    ---- Create a new buffer and set its contents to the concatenated text
    local model = "dolphin-mixtral" local command = string.format('curl --silent --no-buffer -X POST http://localhost:11434/api/generate -d \'{"model":"%s","prompt":"%s","stream":false}\'', model, prompt)
    local response = vim.fn.system(command)
    -- Extract the response from the string
    local start_index = string.find(response, '"response":"') + 12
    local end_index = string.find(response, '","done":true', start_index) - 1
    local parsed_response = string.sub(response, start_index, end_index)
    -- Open response in a new buffer
    vim.cmd('vnew')
    vim.api.nvim_buf_set_lines(0, 0, -1, false, {parsed_response})
    vim.cmd('setlocal buftype=nofile')
    vim.cmd('setlocal bufhidden=hide')
    vim.cmd('setlocal noswapfile')
    vim.cmd('setlocal nowrap')
end
return M

